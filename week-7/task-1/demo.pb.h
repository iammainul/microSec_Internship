// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo.proto

#ifndef PROTOBUF_INCLUDED_demo_2eproto
#define PROTOBUF_INCLUDED_demo_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_demo_2eproto 

namespace protobuf_demo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_demo_2eproto
namespace CSV {
class CSTBS;
class CSTBSDefaultTypeInternal;
extern CSTBSDefaultTypeInternal _CSTBS_default_instance_;
}  // namespace CSV
namespace google {
namespace protobuf {
template<> ::CSV::CSTBS* Arena::CreateMaybeMessage<::CSV::CSTBS>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CSV {

// ===================================================================

class CSTBS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSV.CSTBS) */ {
 public:
  CSTBS();
  virtual ~CSTBS();

  CSTBS(const CSTBS& from);

  inline CSTBS& operator=(const CSTBS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSTBS(CSTBS&& from) noexcept
    : CSTBS() {
    *this = ::std::move(from);
  }

  inline CSTBS& operator=(CSTBS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSTBS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSTBS* internal_default_instance() {
    return reinterpret_cast<const CSTBS*>(
               &_CSTBS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CSTBS* other);
  friend void swap(CSTBS& a, CSTBS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSTBS* New() const final {
    return CreateMaybeMessage<CSTBS>(NULL);
  }

  CSTBS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSTBS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSTBS& from);
  void MergeFrom(const CSTBS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTBS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string curveID = 3;
  bool has_curveid() const;
  void clear_curveid();
  static const int kCurveIDFieldNumber = 3;
  const ::std::string& curveid() const;
  void set_curveid(const ::std::string& value);
  #if LANG_CXX11
  void set_curveid(::std::string&& value);
  #endif
  void set_curveid(const char* value);
  void set_curveid(const char* value, size_t size);
  ::std::string* mutable_curveid();
  ::std::string* release_curveid();
  void set_allocated_curveid(::std::string* curveid);

  // required string hashID = 4;
  bool has_hashid() const;
  void clear_hashid();
  static const int kHashIDFieldNumber = 4;
  const ::std::string& hashid() const;
  void set_hashid(const ::std::string& value);
  #if LANG_CXX11
  void set_hashid(::std::string&& value);
  #endif
  void set_hashid(const char* value);
  void set_hashid(const char* value, size_t size);
  ::std::string* mutable_hashid();
  ::std::string* release_hashid();
  void set_allocated_hashid(::std::string* hashid);

  // required uint64 deviceID = 1;
  bool has_deviceid() const;
  void clear_deviceid();
  static const int kDeviceIDFieldNumber = 1;
  ::google::protobuf::uint64 deviceid() const;
  void set_deviceid(::google::protobuf::uint64 value);

  // required uint64 orgID = 2;
  bool has_orgid() const;
  void clear_orgid();
  static const int kOrgIDFieldNumber = 2;
  ::google::protobuf::uint64 orgid() const;
  void set_orgid(::google::protobuf::uint64 value);

  // required int32 pubKLen = 5;
  bool has_pubklen() const;
  void clear_pubklen();
  static const int kPubKLenFieldNumber = 5;
  ::google::protobuf::int32 pubklen() const;
  void set_pubklen(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CSV.CSTBS)
 private:
  void set_has_deviceid();
  void clear_has_deviceid();
  void set_has_orgid();
  void clear_has_orgid();
  void set_has_curveid();
  void clear_has_curveid();
  void set_has_hashid();
  void clear_has_hashid();
  void set_has_pubklen();
  void clear_has_pubklen();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr curveid_;
  ::google::protobuf::internal::ArenaStringPtr hashid_;
  ::google::protobuf::uint64 deviceid_;
  ::google::protobuf::uint64 orgid_;
  ::google::protobuf::int32 pubklen_;
  friend struct ::protobuf_demo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSTBS

// required uint64 deviceID = 1;
inline bool CSTBS::has_deviceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSTBS::set_has_deviceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSTBS::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSTBS::clear_deviceid() {
  deviceid_ = GOOGLE_ULONGLONG(0);
  clear_has_deviceid();
}
inline ::google::protobuf::uint64 CSTBS::deviceid() const {
  // @@protoc_insertion_point(field_get:CSV.CSTBS.deviceID)
  return deviceid_;
}
inline void CSTBS::set_deviceid(::google::protobuf::uint64 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:CSV.CSTBS.deviceID)
}

// required uint64 orgID = 2;
inline bool CSTBS::has_orgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSTBS::set_has_orgid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSTBS::clear_has_orgid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSTBS::clear_orgid() {
  orgid_ = GOOGLE_ULONGLONG(0);
  clear_has_orgid();
}
inline ::google::protobuf::uint64 CSTBS::orgid() const {
  // @@protoc_insertion_point(field_get:CSV.CSTBS.orgID)
  return orgid_;
}
inline void CSTBS::set_orgid(::google::protobuf::uint64 value) {
  set_has_orgid();
  orgid_ = value;
  // @@protoc_insertion_point(field_set:CSV.CSTBS.orgID)
}

// required string curveID = 3;
inline bool CSTBS::has_curveid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSTBS::set_has_curveid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSTBS::clear_has_curveid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSTBS::clear_curveid() {
  curveid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_curveid();
}
inline const ::std::string& CSTBS::curveid() const {
  // @@protoc_insertion_point(field_get:CSV.CSTBS.curveID)
  return curveid_.GetNoArena();
}
inline void CSTBS::set_curveid(const ::std::string& value) {
  set_has_curveid();
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSV.CSTBS.curveID)
}
#if LANG_CXX11
inline void CSTBS::set_curveid(::std::string&& value) {
  set_has_curveid();
  curveid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSV.CSTBS.curveID)
}
#endif
inline void CSTBS::set_curveid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_curveid();
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSV.CSTBS.curveID)
}
inline void CSTBS::set_curveid(const char* value, size_t size) {
  set_has_curveid();
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSV.CSTBS.curveID)
}
inline ::std::string* CSTBS::mutable_curveid() {
  set_has_curveid();
  // @@protoc_insertion_point(field_mutable:CSV.CSTBS.curveID)
  return curveid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSTBS::release_curveid() {
  // @@protoc_insertion_point(field_release:CSV.CSTBS.curveID)
  if (!has_curveid()) {
    return NULL;
  }
  clear_has_curveid();
  return curveid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSTBS::set_allocated_curveid(::std::string* curveid) {
  if (curveid != NULL) {
    set_has_curveid();
  } else {
    clear_has_curveid();
  }
  curveid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), curveid);
  // @@protoc_insertion_point(field_set_allocated:CSV.CSTBS.curveID)
}

// required string hashID = 4;
inline bool CSTBS::has_hashid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSTBS::set_has_hashid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSTBS::clear_has_hashid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSTBS::clear_hashid() {
  hashid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hashid();
}
inline const ::std::string& CSTBS::hashid() const {
  // @@protoc_insertion_point(field_get:CSV.CSTBS.hashID)
  return hashid_.GetNoArena();
}
inline void CSTBS::set_hashid(const ::std::string& value) {
  set_has_hashid();
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSV.CSTBS.hashID)
}
#if LANG_CXX11
inline void CSTBS::set_hashid(::std::string&& value) {
  set_has_hashid();
  hashid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSV.CSTBS.hashID)
}
#endif
inline void CSTBS::set_hashid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hashid();
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSV.CSTBS.hashID)
}
inline void CSTBS::set_hashid(const char* value, size_t size) {
  set_has_hashid();
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSV.CSTBS.hashID)
}
inline ::std::string* CSTBS::mutable_hashid() {
  set_has_hashid();
  // @@protoc_insertion_point(field_mutable:CSV.CSTBS.hashID)
  return hashid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSTBS::release_hashid() {
  // @@protoc_insertion_point(field_release:CSV.CSTBS.hashID)
  if (!has_hashid()) {
    return NULL;
  }
  clear_has_hashid();
  return hashid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSTBS::set_allocated_hashid(::std::string* hashid) {
  if (hashid != NULL) {
    set_has_hashid();
  } else {
    clear_has_hashid();
  }
  hashid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashid);
  // @@protoc_insertion_point(field_set_allocated:CSV.CSTBS.hashID)
}

// required int32 pubKLen = 5;
inline bool CSTBS::has_pubklen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSTBS::set_has_pubklen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSTBS::clear_has_pubklen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSTBS::clear_pubklen() {
  pubklen_ = 0;
  clear_has_pubklen();
}
inline ::google::protobuf::int32 CSTBS::pubklen() const {
  // @@protoc_insertion_point(field_get:CSV.CSTBS.pubKLen)
  return pubklen_;
}
inline void CSTBS::set_pubklen(::google::protobuf::int32 value) {
  set_has_pubklen();
  pubklen_ = value;
  // @@protoc_insertion_point(field_set:CSV.CSTBS.pubKLen)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace CSV

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_demo_2eproto
