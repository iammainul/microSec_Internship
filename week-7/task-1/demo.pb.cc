// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo.proto

#include "demo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace CSV {
class CSTBSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSTBS>
      _instance;
} _CSTBS_default_instance_;
}  // namespace CSV
namespace protobuf_demo_2eproto {
static void InitDefaultsCSTBS() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::CSV::_CSTBS_default_instance_;
    new (ptr) ::CSV::CSTBS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSV::CSTBS::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSTBS =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSTBS}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CSTBS.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSV::CSTBS, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSV::CSTBS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSV::CSTBS, deviceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSV::CSTBS, orgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSV::CSTBS, curveid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSV::CSTBS, hashid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSV::CSTBS, pubklen_),
  2,
  3,
  0,
  1,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::CSV::CSTBS)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::CSV::_CSTBS_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "demo.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ndemo.proto\022\003CSV\"Z\n\005CSTBS\022\020\n\010deviceID\030\001"
      " \002(\004\022\r\n\005orgID\030\002 \002(\004\022\017\n\007curveID\030\003 \002(\t\022\016\n\006"
      "hashID\030\004 \002(\t\022\017\n\007pubKLen\030\005 \002(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 109);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "demo.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_demo_2eproto
namespace CSV {

// ===================================================================

void CSTBS::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSTBS::kDeviceIDFieldNumber;
const int CSTBS::kOrgIDFieldNumber;
const int CSTBS::kCurveIDFieldNumber;
const int CSTBS::kHashIDFieldNumber;
const int CSTBS::kPubKLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSTBS::CSTBS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_demo_2eproto::scc_info_CSTBS.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSV.CSTBS)
}
CSTBS::CSTBS(const CSTBS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  curveid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_curveid()) {
    curveid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.curveid_);
  }
  hashid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hashid()) {
    hashid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashid_);
  }
  ::memcpy(&deviceid_, &from.deviceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pubklen_) -
    reinterpret_cast<char*>(&deviceid_)) + sizeof(pubklen_));
  // @@protoc_insertion_point(copy_constructor:CSV.CSTBS)
}

void CSTBS::SharedCtor() {
  curveid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&deviceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pubklen_) -
      reinterpret_cast<char*>(&deviceid_)) + sizeof(pubklen_));
}

CSTBS::~CSTBS() {
  // @@protoc_insertion_point(destructor:CSV.CSTBS)
  SharedDtor();
}

void CSTBS::SharedDtor() {
  curveid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSTBS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CSTBS::descriptor() {
  ::protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSTBS& CSTBS::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_demo_2eproto::scc_info_CSTBS.base);
  return *internal_default_instance();
}


void CSTBS::Clear() {
// @@protoc_insertion_point(message_clear_start:CSV.CSTBS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      curveid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      hashid_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&deviceid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pubklen_) -
        reinterpret_cast<char*>(&deviceid_)) + sizeof(pubklen_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSTBS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSV.CSTBS)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 deviceID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_deviceid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deviceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 orgID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_orgid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &orgid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string curveID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_curveid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->curveid().data(), static_cast<int>(this->curveid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSV.CSTBS.curveID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string hashID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hashid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hashid().data(), static_cast<int>(this->hashid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSV.CSTBS.hashID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 pubKLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_pubklen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pubklen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSV.CSTBS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSV.CSTBS)
  return false;
#undef DO_
}

void CSTBS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSV.CSTBS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 deviceID = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->deviceid(), output);
  }

  // required uint64 orgID = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->orgid(), output);
  }

  // required string curveID = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->curveid().data(), static_cast<int>(this->curveid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSV.CSTBS.curveID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->curveid(), output);
  }

  // required string hashID = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hashid().data(), static_cast<int>(this->hashid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSV.CSTBS.hashID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hashid(), output);
  }

  // required int32 pubKLen = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pubklen(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSV.CSTBS)
}

::google::protobuf::uint8* CSTBS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSV.CSTBS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 deviceID = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->deviceid(), target);
  }

  // required uint64 orgID = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->orgid(), target);
  }

  // required string curveID = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->curveid().data(), static_cast<int>(this->curveid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSV.CSTBS.curveID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->curveid(), target);
  }

  // required string hashID = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hashid().data(), static_cast<int>(this->hashid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSV.CSTBS.hashID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hashid(), target);
  }

  // required int32 pubKLen = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pubklen(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSV.CSTBS)
  return target;
}

size_t CSTBS::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CSV.CSTBS)
  size_t total_size = 0;

  if (has_curveid()) {
    // required string curveID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->curveid());
  }

  if (has_hashid()) {
    // required string hashID = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hashid());
  }

  if (has_deviceid()) {
    // required uint64 deviceID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->deviceid());
  }

  if (has_orgid()) {
    // required uint64 orgID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->orgid());
  }

  if (has_pubklen()) {
    // required int32 pubKLen = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pubklen());
  }

  return total_size;
}
size_t CSTBS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSV.CSTBS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string curveID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->curveid());

    // required string hashID = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hashid());

    // required uint64 deviceID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->deviceid());

    // required uint64 orgID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->orgid());

    // required int32 pubKLen = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pubklen());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSTBS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSV.CSTBS)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTBS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSTBS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSV.CSTBS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSV.CSTBS)
    MergeFrom(*source);
  }
}

void CSTBS::MergeFrom(const CSTBS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSV.CSTBS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_curveid();
      curveid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.curveid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_hashid();
      hashid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashid_);
    }
    if (cached_has_bits & 0x00000004u) {
      deviceid_ = from.deviceid_;
    }
    if (cached_has_bits & 0x00000008u) {
      orgid_ = from.orgid_;
    }
    if (cached_has_bits & 0x00000010u) {
      pubklen_ = from.pubklen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSTBS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSV.CSTBS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTBS::CopyFrom(const CSTBS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSV.CSTBS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTBS::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void CSTBS::Swap(CSTBS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSTBS::InternalSwap(CSTBS* other) {
  using std::swap;
  curveid_.Swap(&other->curveid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hashid_.Swap(&other->hashid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(deviceid_, other->deviceid_);
  swap(orgid_, other->orgid_);
  swap(pubklen_, other->pubklen_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CSTBS::GetMetadata() const {
  protobuf_demo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_demo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CSV
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CSV::CSTBS* Arena::CreateMaybeMessage< ::CSV::CSTBS >(Arena* arena) {
  return Arena::CreateInternal< ::CSV::CSTBS >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
