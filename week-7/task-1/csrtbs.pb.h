// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csrtbs.proto

#ifndef PROTOBUF_INCLUDED_csrtbs_2eproto
#define PROTOBUF_INCLUDED_csrtbs_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_csrtbs_2eproto 

namespace protobuf_csrtbs_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_csrtbs_2eproto
namespace CSV {
class CA;
class CADefaultTypeInternal;
extern CADefaultTypeInternal _CA_default_instance_;
class CSTBS;
class CSTBSDefaultTypeInternal;
extern CSTBSDefaultTypeInternal _CSTBS_default_instance_;
class MCSR;
class MCSRDefaultTypeInternal;
extern MCSRDefaultTypeInternal _MCSR_default_instance_;
}  // namespace CSV
namespace google {
namespace protobuf {
template<> ::CSV::CA* Arena::CreateMaybeMessage<::CSV::CA>(Arena*);
template<> ::CSV::CSTBS* Arena::CreateMaybeMessage<::CSV::CSTBS>(Arena*);
template<> ::CSV::MCSR* Arena::CreateMaybeMessage<::CSV::MCSR>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace CSV {

// ===================================================================

class CSTBS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSV.CSTBS) */ {
 public:
  CSTBS();
  virtual ~CSTBS();

  CSTBS(const CSTBS& from);

  inline CSTBS& operator=(const CSTBS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSTBS(CSTBS&& from) noexcept
    : CSTBS() {
    *this = ::std::move(from);
  }

  inline CSTBS& operator=(CSTBS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSTBS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSTBS* internal_default_instance() {
    return reinterpret_cast<const CSTBS*>(
               &_CSTBS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CSTBS* other);
  friend void swap(CSTBS& a, CSTBS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSTBS* New() const final {
    return CreateMaybeMessage<CSTBS>(NULL);
  }

  CSTBS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSTBS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSTBS& from);
  void MergeFrom(const CSTBS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSTBS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string curveID = 3;
  bool has_curveid() const;
  void clear_curveid();
  static const int kCurveIDFieldNumber = 3;
  const ::std::string& curveid() const;
  void set_curveid(const ::std::string& value);
  #if LANG_CXX11
  void set_curveid(::std::string&& value);
  #endif
  void set_curveid(const char* value);
  void set_curveid(const char* value, size_t size);
  ::std::string* mutable_curveid();
  ::std::string* release_curveid();
  void set_allocated_curveid(::std::string* curveid);

  // required string hashID = 4;
  bool has_hashid() const;
  void clear_hashid();
  static const int kHashIDFieldNumber = 4;
  const ::std::string& hashid() const;
  void set_hashid(const ::std::string& value);
  #if LANG_CXX11
  void set_hashid(::std::string&& value);
  #endif
  void set_hashid(const char* value);
  void set_hashid(const char* value, size_t size);
  ::std::string* mutable_hashid();
  ::std::string* release_hashid();
  void set_allocated_hashid(::std::string* hashid);

  // required uint64 deviceID = 1;
  bool has_deviceid() const;
  void clear_deviceid();
  static const int kDeviceIDFieldNumber = 1;
  ::google::protobuf::uint64 deviceid() const;
  void set_deviceid(::google::protobuf::uint64 value);

  // required uint64 orgID = 2;
  bool has_orgid() const;
  void clear_orgid();
  static const int kOrgIDFieldNumber = 2;
  ::google::protobuf::uint64 orgid() const;
  void set_orgid(::google::protobuf::uint64 value);

  // required int32 pubKLen = 5;
  bool has_pubklen() const;
  void clear_pubklen();
  static const int kPubKLenFieldNumber = 5;
  ::google::protobuf::int32 pubklen() const;
  void set_pubklen(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CSV.CSTBS)
 private:
  void set_has_deviceid();
  void clear_has_deviceid();
  void set_has_orgid();
  void clear_has_orgid();
  void set_has_curveid();
  void clear_has_curveid();
  void set_has_hashid();
  void clear_has_hashid();
  void set_has_pubklen();
  void clear_has_pubklen();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr curveid_;
  ::google::protobuf::internal::ArenaStringPtr hashid_;
  ::google::protobuf::uint64 deviceid_;
  ::google::protobuf::uint64 orgid_;
  ::google::protobuf::int32 pubklen_;
  friend struct ::protobuf_csrtbs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MCSR : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSV.MCSR) */ {
 public:
  MCSR();
  virtual ~MCSR();

  MCSR(const MCSR& from);

  inline MCSR& operator=(const MCSR& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MCSR(MCSR&& from) noexcept
    : MCSR() {
    *this = ::std::move(from);
  }

  inline MCSR& operator=(MCSR&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MCSR& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MCSR* internal_default_instance() {
    return reinterpret_cast<const MCSR*>(
               &_MCSR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MCSR* other);
  friend void swap(MCSR& a, MCSR& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MCSR* New() const final {
    return CreateMaybeMessage<MCSR>(NULL);
  }

  MCSR* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MCSR>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MCSR& from);
  void MergeFrom(const MCSR& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MCSR* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string curveID = 3;
  bool has_curveid() const;
  void clear_curveid();
  static const int kCurveIDFieldNumber = 3;
  const ::std::string& curveid() const;
  void set_curveid(const ::std::string& value);
  #if LANG_CXX11
  void set_curveid(::std::string&& value);
  #endif
  void set_curveid(const char* value);
  void set_curveid(const char* value, size_t size);
  ::std::string* mutable_curveid();
  ::std::string* release_curveid();
  void set_allocated_curveid(::std::string* curveid);

  // required string hashID = 4;
  bool has_hashid() const;
  void clear_hashid();
  static const int kHashIDFieldNumber = 4;
  const ::std::string& hashid() const;
  void set_hashid(const ::std::string& value);
  #if LANG_CXX11
  void set_hashid(::std::string&& value);
  #endif
  void set_hashid(const char* value);
  void set_hashid(const char* value, size_t size);
  ::std::string* mutable_hashid();
  ::std::string* release_hashid();
  void set_allocated_hashid(::std::string* hashid);

  // required bytes sig = 7;
  bool has_sig() const;
  void clear_sig();
  static const int kSigFieldNumber = 7;
  const ::std::string& sig() const;
  void set_sig(const ::std::string& value);
  #if LANG_CXX11
  void set_sig(::std::string&& value);
  #endif
  void set_sig(const char* value);
  void set_sig(const void* value, size_t size);
  ::std::string* mutable_sig();
  ::std::string* release_sig();
  void set_allocated_sig(::std::string* sig);

  // required uint64 deviceID = 1;
  bool has_deviceid() const;
  void clear_deviceid();
  static const int kDeviceIDFieldNumber = 1;
  ::google::protobuf::uint64 deviceid() const;
  void set_deviceid(::google::protobuf::uint64 value);

  // required uint64 orgID = 2;
  bool has_orgid() const;
  void clear_orgid();
  static const int kOrgIDFieldNumber = 2;
  ::google::protobuf::uint64 orgid() const;
  void set_orgid(::google::protobuf::uint64 value);

  // required int32 pubKLen = 5;
  bool has_pubklen() const;
  void clear_pubklen();
  static const int kPubKLenFieldNumber = 5;
  ::google::protobuf::int32 pubklen() const;
  void set_pubklen(::google::protobuf::int32 value);

  // required int32 sigL = 6;
  bool has_sigl() const;
  void clear_sigl();
  static const int kSigLFieldNumber = 6;
  ::google::protobuf::int32 sigl() const;
  void set_sigl(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CSV.MCSR)
 private:
  void set_has_deviceid();
  void clear_has_deviceid();
  void set_has_orgid();
  void clear_has_orgid();
  void set_has_curveid();
  void clear_has_curveid();
  void set_has_hashid();
  void clear_has_hashid();
  void set_has_pubklen();
  void clear_has_pubklen();
  void set_has_sigl();
  void clear_has_sigl();
  void set_has_sig();
  void clear_has_sig();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr curveid_;
  ::google::protobuf::internal::ArenaStringPtr hashid_;
  ::google::protobuf::internal::ArenaStringPtr sig_;
  ::google::protobuf::uint64 deviceid_;
  ::google::protobuf::uint64 orgid_;
  ::google::protobuf::int32 pubklen_;
  ::google::protobuf::int32 sigl_;
  friend struct ::protobuf_csrtbs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CA : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CSV.CA) */ {
 public:
  CA();
  virtual ~CA();

  CA(const CA& from);

  inline CA& operator=(const CA& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CA(CA&& from) noexcept
    : CA() {
    *this = ::std::move(from);
  }

  inline CA& operator=(CA&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CA& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CA* internal_default_instance() {
    return reinterpret_cast<const CA*>(
               &_CA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CA* other);
  friend void swap(CA& a, CA& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CA* New() const final {
    return CreateMaybeMessage<CA>(NULL);
  }

  CA* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CA>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CA& from);
  void MergeFrom(const CA& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CA* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string curveID = 3;
  bool has_curveid() const;
  void clear_curveid();
  static const int kCurveIDFieldNumber = 3;
  const ::std::string& curveid() const;
  void set_curveid(const ::std::string& value);
  #if LANG_CXX11
  void set_curveid(::std::string&& value);
  #endif
  void set_curveid(const char* value);
  void set_curveid(const char* value, size_t size);
  ::std::string* mutable_curveid();
  ::std::string* release_curveid();
  void set_allocated_curveid(::std::string* curveid);

  // required string hashID = 4;
  bool has_hashid() const;
  void clear_hashid();
  static const int kHashIDFieldNumber = 4;
  const ::std::string& hashid() const;
  void set_hashid(const ::std::string& value);
  #if LANG_CXX11
  void set_hashid(::std::string&& value);
  #endif
  void set_hashid(const char* value);
  void set_hashid(const char* value, size_t size);
  ::std::string* mutable_hashid();
  ::std::string* release_hashid();
  void set_allocated_hashid(::std::string* hashid);

  // required uint64 deviceID = 1;
  bool has_deviceid() const;
  void clear_deviceid();
  static const int kDeviceIDFieldNumber = 1;
  ::google::protobuf::uint64 deviceid() const;
  void set_deviceid(::google::protobuf::uint64 value);

  // required uint64 orgID = 2;
  bool has_orgid() const;
  void clear_orgid();
  static const int kOrgIDFieldNumber = 2;
  ::google::protobuf::uint64 orgid() const;
  void set_orgid(::google::protobuf::uint64 value);

  // required uint64 certSNO = 6;
  bool has_certsno() const;
  void clear_certsno();
  static const int kCertSNOFieldNumber = 6;
  ::google::protobuf::uint64 certsno() const;
  void set_certsno(::google::protobuf::uint64 value);

  // required int32 pubKLen = 5;
  bool has_pubklen() const;
  void clear_pubklen();
  static const int kPubKLenFieldNumber = 5;
  ::google::protobuf::int32 pubklen() const;
  void set_pubklen(::google::protobuf::int32 value);

  // required int32 validF = 8;
  bool has_validf() const;
  void clear_validf();
  static const int kValidFFieldNumber = 8;
  ::google::protobuf::int32 validf() const;
  void set_validf(::google::protobuf::int32 value);

  // required uint64 caID = 7;
  bool has_caid() const;
  void clear_caid();
  static const int kCaIDFieldNumber = 7;
  ::google::protobuf::uint64 caid() const;
  void set_caid(::google::protobuf::uint64 value);

  // required int32 validFor = 9;
  bool has_validfor() const;
  void clear_validfor();
  static const int kValidForFieldNumber = 9;
  ::google::protobuf::int32 validfor() const;
  void set_validfor(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CSV.CA)
 private:
  void set_has_deviceid();
  void clear_has_deviceid();
  void set_has_orgid();
  void clear_has_orgid();
  void set_has_curveid();
  void clear_has_curveid();
  void set_has_hashid();
  void clear_has_hashid();
  void set_has_pubklen();
  void clear_has_pubklen();
  void set_has_certsno();
  void clear_has_certsno();
  void set_has_caid();
  void clear_has_caid();
  void set_has_validf();
  void clear_has_validf();
  void set_has_validfor();
  void clear_has_validfor();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr curveid_;
  ::google::protobuf::internal::ArenaStringPtr hashid_;
  ::google::protobuf::uint64 deviceid_;
  ::google::protobuf::uint64 orgid_;
  ::google::protobuf::uint64 certsno_;
  ::google::protobuf::int32 pubklen_;
  ::google::protobuf::int32 validf_;
  ::google::protobuf::uint64 caid_;
  ::google::protobuf::int32 validfor_;
  friend struct ::protobuf_csrtbs_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSTBS

// required uint64 deviceID = 1;
inline bool CSTBS::has_deviceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSTBS::set_has_deviceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSTBS::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSTBS::clear_deviceid() {
  deviceid_ = GOOGLE_ULONGLONG(0);
  clear_has_deviceid();
}
inline ::google::protobuf::uint64 CSTBS::deviceid() const {
  // @@protoc_insertion_point(field_get:CSV.CSTBS.deviceID)
  return deviceid_;
}
inline void CSTBS::set_deviceid(::google::protobuf::uint64 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:CSV.CSTBS.deviceID)
}

// required uint64 orgID = 2;
inline bool CSTBS::has_orgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSTBS::set_has_orgid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSTBS::clear_has_orgid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSTBS::clear_orgid() {
  orgid_ = GOOGLE_ULONGLONG(0);
  clear_has_orgid();
}
inline ::google::protobuf::uint64 CSTBS::orgid() const {
  // @@protoc_insertion_point(field_get:CSV.CSTBS.orgID)
  return orgid_;
}
inline void CSTBS::set_orgid(::google::protobuf::uint64 value) {
  set_has_orgid();
  orgid_ = value;
  // @@protoc_insertion_point(field_set:CSV.CSTBS.orgID)
}

// required string curveID = 3;
inline bool CSTBS::has_curveid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSTBS::set_has_curveid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSTBS::clear_has_curveid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSTBS::clear_curveid() {
  curveid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_curveid();
}
inline const ::std::string& CSTBS::curveid() const {
  // @@protoc_insertion_point(field_get:CSV.CSTBS.curveID)
  return curveid_.GetNoArena();
}
inline void CSTBS::set_curveid(const ::std::string& value) {
  set_has_curveid();
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSV.CSTBS.curveID)
}
#if LANG_CXX11
inline void CSTBS::set_curveid(::std::string&& value) {
  set_has_curveid();
  curveid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSV.CSTBS.curveID)
}
#endif
inline void CSTBS::set_curveid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_curveid();
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSV.CSTBS.curveID)
}
inline void CSTBS::set_curveid(const char* value, size_t size) {
  set_has_curveid();
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSV.CSTBS.curveID)
}
inline ::std::string* CSTBS::mutable_curveid() {
  set_has_curveid();
  // @@protoc_insertion_point(field_mutable:CSV.CSTBS.curveID)
  return curveid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSTBS::release_curveid() {
  // @@protoc_insertion_point(field_release:CSV.CSTBS.curveID)
  if (!has_curveid()) {
    return NULL;
  }
  clear_has_curveid();
  return curveid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSTBS::set_allocated_curveid(::std::string* curveid) {
  if (curveid != NULL) {
    set_has_curveid();
  } else {
    clear_has_curveid();
  }
  curveid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), curveid);
  // @@protoc_insertion_point(field_set_allocated:CSV.CSTBS.curveID)
}

// required string hashID = 4;
inline bool CSTBS::has_hashid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSTBS::set_has_hashid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSTBS::clear_has_hashid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSTBS::clear_hashid() {
  hashid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hashid();
}
inline const ::std::string& CSTBS::hashid() const {
  // @@protoc_insertion_point(field_get:CSV.CSTBS.hashID)
  return hashid_.GetNoArena();
}
inline void CSTBS::set_hashid(const ::std::string& value) {
  set_has_hashid();
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSV.CSTBS.hashID)
}
#if LANG_CXX11
inline void CSTBS::set_hashid(::std::string&& value) {
  set_has_hashid();
  hashid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSV.CSTBS.hashID)
}
#endif
inline void CSTBS::set_hashid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hashid();
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSV.CSTBS.hashID)
}
inline void CSTBS::set_hashid(const char* value, size_t size) {
  set_has_hashid();
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSV.CSTBS.hashID)
}
inline ::std::string* CSTBS::mutable_hashid() {
  set_has_hashid();
  // @@protoc_insertion_point(field_mutable:CSV.CSTBS.hashID)
  return hashid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSTBS::release_hashid() {
  // @@protoc_insertion_point(field_release:CSV.CSTBS.hashID)
  if (!has_hashid()) {
    return NULL;
  }
  clear_has_hashid();
  return hashid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSTBS::set_allocated_hashid(::std::string* hashid) {
  if (hashid != NULL) {
    set_has_hashid();
  } else {
    clear_has_hashid();
  }
  hashid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashid);
  // @@protoc_insertion_point(field_set_allocated:CSV.CSTBS.hashID)
}

// required int32 pubKLen = 5;
inline bool CSTBS::has_pubklen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSTBS::set_has_pubklen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSTBS::clear_has_pubklen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSTBS::clear_pubklen() {
  pubklen_ = 0;
  clear_has_pubklen();
}
inline ::google::protobuf::int32 CSTBS::pubklen() const {
  // @@protoc_insertion_point(field_get:CSV.CSTBS.pubKLen)
  return pubklen_;
}
inline void CSTBS::set_pubklen(::google::protobuf::int32 value) {
  set_has_pubklen();
  pubklen_ = value;
  // @@protoc_insertion_point(field_set:CSV.CSTBS.pubKLen)
}

// -------------------------------------------------------------------

// MCSR

// required uint64 deviceID = 1;
inline bool MCSR::has_deviceid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MCSR::set_has_deviceid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MCSR::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MCSR::clear_deviceid() {
  deviceid_ = GOOGLE_ULONGLONG(0);
  clear_has_deviceid();
}
inline ::google::protobuf::uint64 MCSR::deviceid() const {
  // @@protoc_insertion_point(field_get:CSV.MCSR.deviceID)
  return deviceid_;
}
inline void MCSR::set_deviceid(::google::protobuf::uint64 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:CSV.MCSR.deviceID)
}

// required uint64 orgID = 2;
inline bool MCSR::has_orgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MCSR::set_has_orgid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MCSR::clear_has_orgid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MCSR::clear_orgid() {
  orgid_ = GOOGLE_ULONGLONG(0);
  clear_has_orgid();
}
inline ::google::protobuf::uint64 MCSR::orgid() const {
  // @@protoc_insertion_point(field_get:CSV.MCSR.orgID)
  return orgid_;
}
inline void MCSR::set_orgid(::google::protobuf::uint64 value) {
  set_has_orgid();
  orgid_ = value;
  // @@protoc_insertion_point(field_set:CSV.MCSR.orgID)
}

// required string curveID = 3;
inline bool MCSR::has_curveid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MCSR::set_has_curveid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MCSR::clear_has_curveid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MCSR::clear_curveid() {
  curveid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_curveid();
}
inline const ::std::string& MCSR::curveid() const {
  // @@protoc_insertion_point(field_get:CSV.MCSR.curveID)
  return curveid_.GetNoArena();
}
inline void MCSR::set_curveid(const ::std::string& value) {
  set_has_curveid();
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSV.MCSR.curveID)
}
#if LANG_CXX11
inline void MCSR::set_curveid(::std::string&& value) {
  set_has_curveid();
  curveid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSV.MCSR.curveID)
}
#endif
inline void MCSR::set_curveid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_curveid();
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSV.MCSR.curveID)
}
inline void MCSR::set_curveid(const char* value, size_t size) {
  set_has_curveid();
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSV.MCSR.curveID)
}
inline ::std::string* MCSR::mutable_curveid() {
  set_has_curveid();
  // @@protoc_insertion_point(field_mutable:CSV.MCSR.curveID)
  return curveid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MCSR::release_curveid() {
  // @@protoc_insertion_point(field_release:CSV.MCSR.curveID)
  if (!has_curveid()) {
    return NULL;
  }
  clear_has_curveid();
  return curveid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MCSR::set_allocated_curveid(::std::string* curveid) {
  if (curveid != NULL) {
    set_has_curveid();
  } else {
    clear_has_curveid();
  }
  curveid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), curveid);
  // @@protoc_insertion_point(field_set_allocated:CSV.MCSR.curveID)
}

// required string hashID = 4;
inline bool MCSR::has_hashid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MCSR::set_has_hashid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MCSR::clear_has_hashid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MCSR::clear_hashid() {
  hashid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hashid();
}
inline const ::std::string& MCSR::hashid() const {
  // @@protoc_insertion_point(field_get:CSV.MCSR.hashID)
  return hashid_.GetNoArena();
}
inline void MCSR::set_hashid(const ::std::string& value) {
  set_has_hashid();
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSV.MCSR.hashID)
}
#if LANG_CXX11
inline void MCSR::set_hashid(::std::string&& value) {
  set_has_hashid();
  hashid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSV.MCSR.hashID)
}
#endif
inline void MCSR::set_hashid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hashid();
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSV.MCSR.hashID)
}
inline void MCSR::set_hashid(const char* value, size_t size) {
  set_has_hashid();
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSV.MCSR.hashID)
}
inline ::std::string* MCSR::mutable_hashid() {
  set_has_hashid();
  // @@protoc_insertion_point(field_mutable:CSV.MCSR.hashID)
  return hashid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MCSR::release_hashid() {
  // @@protoc_insertion_point(field_release:CSV.MCSR.hashID)
  if (!has_hashid()) {
    return NULL;
  }
  clear_has_hashid();
  return hashid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MCSR::set_allocated_hashid(::std::string* hashid) {
  if (hashid != NULL) {
    set_has_hashid();
  } else {
    clear_has_hashid();
  }
  hashid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashid);
  // @@protoc_insertion_point(field_set_allocated:CSV.MCSR.hashID)
}

// required int32 pubKLen = 5;
inline bool MCSR::has_pubklen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MCSR::set_has_pubklen() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MCSR::clear_has_pubklen() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MCSR::clear_pubklen() {
  pubklen_ = 0;
  clear_has_pubklen();
}
inline ::google::protobuf::int32 MCSR::pubklen() const {
  // @@protoc_insertion_point(field_get:CSV.MCSR.pubKLen)
  return pubklen_;
}
inline void MCSR::set_pubklen(::google::protobuf::int32 value) {
  set_has_pubklen();
  pubklen_ = value;
  // @@protoc_insertion_point(field_set:CSV.MCSR.pubKLen)
}

// required int32 sigL = 6;
inline bool MCSR::has_sigl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MCSR::set_has_sigl() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MCSR::clear_has_sigl() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MCSR::clear_sigl() {
  sigl_ = 0;
  clear_has_sigl();
}
inline ::google::protobuf::int32 MCSR::sigl() const {
  // @@protoc_insertion_point(field_get:CSV.MCSR.sigL)
  return sigl_;
}
inline void MCSR::set_sigl(::google::protobuf::int32 value) {
  set_has_sigl();
  sigl_ = value;
  // @@protoc_insertion_point(field_set:CSV.MCSR.sigL)
}

// required bytes sig = 7;
inline bool MCSR::has_sig() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MCSR::set_has_sig() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MCSR::clear_has_sig() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MCSR::clear_sig() {
  sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sig();
}
inline const ::std::string& MCSR::sig() const {
  // @@protoc_insertion_point(field_get:CSV.MCSR.sig)
  return sig_.GetNoArena();
}
inline void MCSR::set_sig(const ::std::string& value) {
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSV.MCSR.sig)
}
#if LANG_CXX11
inline void MCSR::set_sig(::std::string&& value) {
  set_has_sig();
  sig_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSV.MCSR.sig)
}
#endif
inline void MCSR::set_sig(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSV.MCSR.sig)
}
inline void MCSR::set_sig(const void* value, size_t size) {
  set_has_sig();
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSV.MCSR.sig)
}
inline ::std::string* MCSR::mutable_sig() {
  set_has_sig();
  // @@protoc_insertion_point(field_mutable:CSV.MCSR.sig)
  return sig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MCSR::release_sig() {
  // @@protoc_insertion_point(field_release:CSV.MCSR.sig)
  if (!has_sig()) {
    return NULL;
  }
  clear_has_sig();
  return sig_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MCSR::set_allocated_sig(::std::string* sig) {
  if (sig != NULL) {
    set_has_sig();
  } else {
    clear_has_sig();
  }
  sig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sig);
  // @@protoc_insertion_point(field_set_allocated:CSV.MCSR.sig)
}

// -------------------------------------------------------------------

// CA

// required uint64 deviceID = 1;
inline bool CA::has_deviceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CA::set_has_deviceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CA::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CA::clear_deviceid() {
  deviceid_ = GOOGLE_ULONGLONG(0);
  clear_has_deviceid();
}
inline ::google::protobuf::uint64 CA::deviceid() const {
  // @@protoc_insertion_point(field_get:CSV.CA.deviceID)
  return deviceid_;
}
inline void CA::set_deviceid(::google::protobuf::uint64 value) {
  set_has_deviceid();
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:CSV.CA.deviceID)
}

// required uint64 orgID = 2;
inline bool CA::has_orgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CA::set_has_orgid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CA::clear_has_orgid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CA::clear_orgid() {
  orgid_ = GOOGLE_ULONGLONG(0);
  clear_has_orgid();
}
inline ::google::protobuf::uint64 CA::orgid() const {
  // @@protoc_insertion_point(field_get:CSV.CA.orgID)
  return orgid_;
}
inline void CA::set_orgid(::google::protobuf::uint64 value) {
  set_has_orgid();
  orgid_ = value;
  // @@protoc_insertion_point(field_set:CSV.CA.orgID)
}

// required string curveID = 3;
inline bool CA::has_curveid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CA::set_has_curveid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CA::clear_has_curveid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CA::clear_curveid() {
  curveid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_curveid();
}
inline const ::std::string& CA::curveid() const {
  // @@protoc_insertion_point(field_get:CSV.CA.curveID)
  return curveid_.GetNoArena();
}
inline void CA::set_curveid(const ::std::string& value) {
  set_has_curveid();
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSV.CA.curveID)
}
#if LANG_CXX11
inline void CA::set_curveid(::std::string&& value) {
  set_has_curveid();
  curveid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSV.CA.curveID)
}
#endif
inline void CA::set_curveid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_curveid();
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSV.CA.curveID)
}
inline void CA::set_curveid(const char* value, size_t size) {
  set_has_curveid();
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSV.CA.curveID)
}
inline ::std::string* CA::mutable_curveid() {
  set_has_curveid();
  // @@protoc_insertion_point(field_mutable:CSV.CA.curveID)
  return curveid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CA::release_curveid() {
  // @@protoc_insertion_point(field_release:CSV.CA.curveID)
  if (!has_curveid()) {
    return NULL;
  }
  clear_has_curveid();
  return curveid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CA::set_allocated_curveid(::std::string* curveid) {
  if (curveid != NULL) {
    set_has_curveid();
  } else {
    clear_has_curveid();
  }
  curveid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), curveid);
  // @@protoc_insertion_point(field_set_allocated:CSV.CA.curveID)
}

// required string hashID = 4;
inline bool CA::has_hashid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CA::set_has_hashid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CA::clear_has_hashid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CA::clear_hashid() {
  hashid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hashid();
}
inline const ::std::string& CA::hashid() const {
  // @@protoc_insertion_point(field_get:CSV.CA.hashID)
  return hashid_.GetNoArena();
}
inline void CA::set_hashid(const ::std::string& value) {
  set_has_hashid();
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSV.CA.hashID)
}
#if LANG_CXX11
inline void CA::set_hashid(::std::string&& value) {
  set_has_hashid();
  hashid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CSV.CA.hashID)
}
#endif
inline void CA::set_hashid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hashid();
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSV.CA.hashID)
}
inline void CA::set_hashid(const char* value, size_t size) {
  set_has_hashid();
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSV.CA.hashID)
}
inline ::std::string* CA::mutable_hashid() {
  set_has_hashid();
  // @@protoc_insertion_point(field_mutable:CSV.CA.hashID)
  return hashid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CA::release_hashid() {
  // @@protoc_insertion_point(field_release:CSV.CA.hashID)
  if (!has_hashid()) {
    return NULL;
  }
  clear_has_hashid();
  return hashid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CA::set_allocated_hashid(::std::string* hashid) {
  if (hashid != NULL) {
    set_has_hashid();
  } else {
    clear_has_hashid();
  }
  hashid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashid);
  // @@protoc_insertion_point(field_set_allocated:CSV.CA.hashID)
}

// required int32 pubKLen = 5;
inline bool CA::has_pubklen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CA::set_has_pubklen() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CA::clear_has_pubklen() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CA::clear_pubklen() {
  pubklen_ = 0;
  clear_has_pubklen();
}
inline ::google::protobuf::int32 CA::pubklen() const {
  // @@protoc_insertion_point(field_get:CSV.CA.pubKLen)
  return pubklen_;
}
inline void CA::set_pubklen(::google::protobuf::int32 value) {
  set_has_pubklen();
  pubklen_ = value;
  // @@protoc_insertion_point(field_set:CSV.CA.pubKLen)
}

// required uint64 certSNO = 6;
inline bool CA::has_certsno() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CA::set_has_certsno() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CA::clear_has_certsno() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CA::clear_certsno() {
  certsno_ = GOOGLE_ULONGLONG(0);
  clear_has_certsno();
}
inline ::google::protobuf::uint64 CA::certsno() const {
  // @@protoc_insertion_point(field_get:CSV.CA.certSNO)
  return certsno_;
}
inline void CA::set_certsno(::google::protobuf::uint64 value) {
  set_has_certsno();
  certsno_ = value;
  // @@protoc_insertion_point(field_set:CSV.CA.certSNO)
}

// required uint64 caID = 7;
inline bool CA::has_caid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CA::set_has_caid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CA::clear_has_caid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CA::clear_caid() {
  caid_ = GOOGLE_ULONGLONG(0);
  clear_has_caid();
}
inline ::google::protobuf::uint64 CA::caid() const {
  // @@protoc_insertion_point(field_get:CSV.CA.caID)
  return caid_;
}
inline void CA::set_caid(::google::protobuf::uint64 value) {
  set_has_caid();
  caid_ = value;
  // @@protoc_insertion_point(field_set:CSV.CA.caID)
}

// required int32 validF = 8;
inline bool CA::has_validf() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CA::set_has_validf() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CA::clear_has_validf() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CA::clear_validf() {
  validf_ = 0;
  clear_has_validf();
}
inline ::google::protobuf::int32 CA::validf() const {
  // @@protoc_insertion_point(field_get:CSV.CA.validF)
  return validf_;
}
inline void CA::set_validf(::google::protobuf::int32 value) {
  set_has_validf();
  validf_ = value;
  // @@protoc_insertion_point(field_set:CSV.CA.validF)
}

// required int32 validFor = 9;
inline bool CA::has_validfor() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CA::set_has_validfor() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CA::clear_has_validfor() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CA::clear_validfor() {
  validfor_ = 0;
  clear_has_validfor();
}
inline ::google::protobuf::int32 CA::validfor() const {
  // @@protoc_insertion_point(field_get:CSV.CA.validFor)
  return validfor_;
}
inline void CA::set_validfor(::google::protobuf::int32 value) {
  set_has_validfor();
  validfor_ = value;
  // @@protoc_insertion_point(field_set:CSV.CA.validFor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace CSV

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_csrtbs_2eproto
