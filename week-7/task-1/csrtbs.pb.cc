// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csrtbs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "csrtbs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CA {

namespace {

const ::google::protobuf::Descriptor* CSTBS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSTBS_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_csrtbs_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_csrtbs_2eproto() {
  protobuf_AddDesc_csrtbs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "csrtbs.proto");
  GOOGLE_CHECK(file != NULL);
  CSTBS_descriptor_ = file->message_type(0);
  static const int CSTBS_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTBS, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTBS, orgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTBS, curveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTBS, hashid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTBS, pubklen_),
  };
  CSTBS_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSTBS_descriptor_,
      CSTBS::default_instance_,
      CSTBS_offsets_,
      -1,
      -1,
      -1,
      sizeof(CSTBS),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTBS, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTBS, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_csrtbs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSTBS_descriptor_, &CSTBS::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_csrtbs_2eproto() {
  delete CSTBS::default_instance_;
  delete CSTBS_reflection_;
}

void protobuf_AddDesc_csrtbs_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_csrtbs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014csrtbs.proto\022\002CA\"Z\n\005CSTBS\022\020\n\010deviceID\030"
    "\001 \001(\005\022\r\n\005orgID\030\002 \001(\005\022\017\n\007curveID\030\003 \001(\t\022\016\n"
    "\006hashID\030\004 \001(\t\022\017\n\007pubKLen\030\005 \001(\005b\006proto3", 118);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "csrtbs.proto", &protobuf_RegisterTypes);
  CSTBS::default_instance_ = new CSTBS();
  CSTBS::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_csrtbs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_csrtbs_2eproto {
  StaticDescriptorInitializer_csrtbs_2eproto() {
    protobuf_AddDesc_csrtbs_2eproto();
  }
} static_descriptor_initializer_csrtbs_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSTBS::kDeviceIDFieldNumber;
const int CSTBS::kOrgIDFieldNumber;
const int CSTBS::kCurveIDFieldNumber;
const int CSTBS::kHashIDFieldNumber;
const int CSTBS::kPubKLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSTBS::CSTBS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CA.CSTBS)
}

void CSTBS::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CSTBS::CSTBS(const CSTBS& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CA.CSTBS)
}

void CSTBS::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0;
  orgid_ = 0;
  curveid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubklen_ = 0;
}

CSTBS::~CSTBS() {
  // @@protoc_insertion_point(destructor:CA.CSTBS)
  SharedDtor();
}

void CSTBS::SharedDtor() {
  curveid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CSTBS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSTBS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSTBS_descriptor_;
}

const CSTBS& CSTBS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csrtbs_2eproto();
  return *default_instance_;
}

CSTBS* CSTBS::default_instance_ = NULL;

CSTBS* CSTBS::New(::google::protobuf::Arena* arena) const {
  CSTBS* n = new CSTBS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSTBS::Clear() {
// @@protoc_insertion_point(message_clear_start:CA.CSTBS)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CSTBS, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CSTBS*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(deviceid_, orgid_);
  curveid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubklen_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool CSTBS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CA.CSTBS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 deviceID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deviceid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_orgID;
        break;
      }

      // optional int32 orgID = 2;
      case 2: {
        if (tag == 16) {
         parse_orgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orgid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_curveID;
        break;
      }

      // optional string curveID = 3;
      case 3: {
        if (tag == 26) {
         parse_curveID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_curveid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->curveid().data(), this->curveid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CA.CSTBS.curveID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hashID;
        break;
      }

      // optional string hashID = 4;
      case 4: {
        if (tag == 34) {
         parse_hashID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hashid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hashid().data(), this->hashid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CA.CSTBS.hashID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pubKLen;
        break;
      }

      // optional int32 pubKLen = 5;
      case 5: {
        if (tag == 40) {
         parse_pubKLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pubklen_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CA.CSTBS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CA.CSTBS)
  return false;
#undef DO_
}

void CSTBS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CA.CSTBS)
  // optional int32 deviceID = 1;
  if (this->deviceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->deviceid(), output);
  }

  // optional int32 orgID = 2;
  if (this->orgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->orgid(), output);
  }

  // optional string curveID = 3;
  if (this->curveid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->curveid().data(), this->curveid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CA.CSTBS.curveID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->curveid(), output);
  }

  // optional string hashID = 4;
  if (this->hashid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hashid().data(), this->hashid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CA.CSTBS.hashID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hashid(), output);
  }

  // optional int32 pubKLen = 5;
  if (this->pubklen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pubklen(), output);
  }

  // @@protoc_insertion_point(serialize_end:CA.CSTBS)
}

::google::protobuf::uint8* CSTBS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CA.CSTBS)
  // optional int32 deviceID = 1;
  if (this->deviceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->deviceid(), target);
  }

  // optional int32 orgID = 2;
  if (this->orgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->orgid(), target);
  }

  // optional string curveID = 3;
  if (this->curveid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->curveid().data(), this->curveid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CA.CSTBS.curveID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->curveid(), target);
  }

  // optional string hashID = 4;
  if (this->hashid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hashid().data(), this->hashid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CA.CSTBS.hashID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hashid(), target);
  }

  // optional int32 pubKLen = 5;
  if (this->pubklen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pubklen(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CA.CSTBS)
  return target;
}

int CSTBS::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CA.CSTBS)
  int total_size = 0;

  // optional int32 deviceID = 1;
  if (this->deviceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->deviceid());
  }

  // optional int32 orgID = 2;
  if (this->orgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->orgid());
  }

  // optional string curveID = 3;
  if (this->curveid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->curveid());
  }

  // optional string hashID = 4;
  if (this->hashid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hashid());
  }

  // optional int32 pubKLen = 5;
  if (this->pubklen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pubklen());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSTBS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CA.CSTBS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CSTBS* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSTBS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CA.CSTBS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CA.CSTBS)
    MergeFrom(*source);
  }
}

void CSTBS::MergeFrom(const CSTBS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CA.CSTBS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.deviceid() != 0) {
    set_deviceid(from.deviceid());
  }
  if (from.orgid() != 0) {
    set_orgid(from.orgid());
  }
  if (from.curveid().size() > 0) {

    curveid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.curveid_);
  }
  if (from.hashid().size() > 0) {

    hashid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashid_);
  }
  if (from.pubklen() != 0) {
    set_pubklen(from.pubklen());
  }
}

void CSTBS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CA.CSTBS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTBS::CopyFrom(const CSTBS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CA.CSTBS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTBS::IsInitialized() const {

  return true;
}

void CSTBS::Swap(CSTBS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSTBS::InternalSwap(CSTBS* other) {
  std::swap(deviceid_, other->deviceid_);
  std::swap(orgid_, other->orgid_);
  curveid_.Swap(&other->curveid_);
  hashid_.Swap(&other->hashid_);
  std::swap(pubklen_, other->pubklen_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSTBS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSTBS_descriptor_;
  metadata.reflection = CSTBS_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSTBS

// optional int32 deviceID = 1;
void CSTBS::clear_deviceid() {
  deviceid_ = 0;
}
 ::google::protobuf::int32 CSTBS::deviceid() const {
  // @@protoc_insertion_point(field_get:CA.CSTBS.deviceID)
  return deviceid_;
}
 void CSTBS::set_deviceid(::google::protobuf::int32 value) {
  
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:CA.CSTBS.deviceID)
}

// optional int32 orgID = 2;
void CSTBS::clear_orgid() {
  orgid_ = 0;
}
 ::google::protobuf::int32 CSTBS::orgid() const {
  // @@protoc_insertion_point(field_get:CA.CSTBS.orgID)
  return orgid_;
}
 void CSTBS::set_orgid(::google::protobuf::int32 value) {
  
  orgid_ = value;
  // @@protoc_insertion_point(field_set:CA.CSTBS.orgID)
}

// optional string curveID = 3;
void CSTBS::clear_curveid() {
  curveid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CSTBS::curveid() const {
  // @@protoc_insertion_point(field_get:CA.CSTBS.curveID)
  return curveid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSTBS::set_curveid(const ::std::string& value) {
  
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CA.CSTBS.curveID)
}
 void CSTBS::set_curveid(const char* value) {
  
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CA.CSTBS.curveID)
}
 void CSTBS::set_curveid(const char* value, size_t size) {
  
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CA.CSTBS.curveID)
}
 ::std::string* CSTBS::mutable_curveid() {
  
  // @@protoc_insertion_point(field_mutable:CA.CSTBS.curveID)
  return curveid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CSTBS::release_curveid() {
  // @@protoc_insertion_point(field_release:CA.CSTBS.curveID)
  
  return curveid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSTBS::set_allocated_curveid(::std::string* curveid) {
  if (curveid != NULL) {
    
  } else {
    
  }
  curveid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), curveid);
  // @@protoc_insertion_point(field_set_allocated:CA.CSTBS.curveID)
}

// optional string hashID = 4;
void CSTBS::clear_hashid() {
  hashid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CSTBS::hashid() const {
  // @@protoc_insertion_point(field_get:CA.CSTBS.hashID)
  return hashid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSTBS::set_hashid(const ::std::string& value) {
  
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CA.CSTBS.hashID)
}
 void CSTBS::set_hashid(const char* value) {
  
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CA.CSTBS.hashID)
}
 void CSTBS::set_hashid(const char* value, size_t size) {
  
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CA.CSTBS.hashID)
}
 ::std::string* CSTBS::mutable_hashid() {
  
  // @@protoc_insertion_point(field_mutable:CA.CSTBS.hashID)
  return hashid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CSTBS::release_hashid() {
  // @@protoc_insertion_point(field_release:CA.CSTBS.hashID)
  
  return hashid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSTBS::set_allocated_hashid(::std::string* hashid) {
  if (hashid != NULL) {
    
  } else {
    
  }
  hashid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashid);
  // @@protoc_insertion_point(field_set_allocated:CA.CSTBS.hashID)
}

// optional int32 pubKLen = 5;
void CSTBS::clear_pubklen() {
  pubklen_ = 0;
}
 ::google::protobuf::int32 CSTBS::pubklen() const {
  // @@protoc_insertion_point(field_get:CA.CSTBS.pubKLen)
  return pubklen_;
}
 void CSTBS::set_pubklen(::google::protobuf::int32 value) {
  
  pubklen_ = value;
  // @@protoc_insertion_point(field_set:CA.CSTBS.pubKLen)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace CA

// @@protoc_insertion_point(global_scope)
