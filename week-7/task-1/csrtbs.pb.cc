// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: csrtbs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "csrtbs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CSV {

namespace {

const ::google::protobuf::Descriptor* CSTBS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSTBS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MCSR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MCSR_reflection_ = NULL;
const ::google::protobuf::Descriptor* CA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CA_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_csrtbs_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_csrtbs_2eproto() {
  protobuf_AddDesc_csrtbs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "csrtbs.proto");
  GOOGLE_CHECK(file != NULL);
  CSTBS_descriptor_ = file->message_type(0);
  static const int CSTBS_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTBS, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTBS, orgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTBS, curveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTBS, hashid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTBS, pubklen_),
  };
  CSTBS_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSTBS_descriptor_,
      CSTBS::default_instance_,
      CSTBS_offsets_,
      -1,
      -1,
      -1,
      sizeof(CSTBS),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTBS, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTBS, _is_default_instance_));
  MCSR_descriptor_ = file->message_type(1);
  static const int MCSR_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCSR, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCSR, orgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCSR, curveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCSR, hashid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCSR, pubklen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCSR, sigl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCSR, sig_),
  };
  MCSR_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MCSR_descriptor_,
      MCSR::default_instance_,
      MCSR_offsets_,
      -1,
      -1,
      -1,
      sizeof(MCSR),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCSR, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MCSR, _is_default_instance_));
  CA_descriptor_ = file->message_type(2);
  static const int CA_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CA, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CA, orgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CA, curveid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CA, hashid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CA, pubklen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CA, certsno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CA, caid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CA, validf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CA, validfor_),
  };
  CA_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CA_descriptor_,
      CA::default_instance_,
      CA_offsets_,
      -1,
      -1,
      -1,
      sizeof(CA),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CA, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CA, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_csrtbs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSTBS_descriptor_, &CSTBS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MCSR_descriptor_, &MCSR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CA_descriptor_, &CA::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_csrtbs_2eproto() {
  delete CSTBS::default_instance_;
  delete CSTBS_reflection_;
  delete MCSR::default_instance_;
  delete MCSR_reflection_;
  delete CA::default_instance_;
  delete CA_reflection_;
}

void protobuf_AddDesc_csrtbs_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_csrtbs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014csrtbs.proto\022\003CSV\"Z\n\005CSTBS\022\020\n\010deviceID"
    "\030\001 \001(\005\022\r\n\005orgID\030\002 \001(\005\022\017\n\007curveID\030\003 \001(\t\022\016"
    "\n\006hashID\030\004 \001(\t\022\017\n\007pubKLen\030\005 \001(\005\"t\n\004MCSR\022"
    "\020\n\010deviceID\030\001 \001(\005\022\r\n\005orgID\030\002 \001(\005\022\017\n\007curv"
    "eID\030\003 \001(\t\022\016\n\006hashID\030\004 \001(\t\022\017\n\007pubKLen\030\005 \001"
    "(\005\022\014\n\004sigL\030\006 \001(\005\022\013\n\003sig\030\007 \001(\014\"\230\001\n\002CA\022\020\n\010"
    "deviceID\030\001 \001(\005\022\r\n\005orgID\030\002 \001(\005\022\017\n\007curveID"
    "\030\003 \001(\t\022\016\n\006hashID\030\004 \001(\t\022\017\n\007pubKLen\030\005 \001(\005\022"
    "\017\n\007certSNO\030\006 \001(\005\022\014\n\004caID\030\007 \001(\005\022\016\n\006validF"
    "\030\010 \001(\005\022\020\n\010validFor\030\t \001(\005b\006proto3", 392);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "csrtbs.proto", &protobuf_RegisterTypes);
  CSTBS::default_instance_ = new CSTBS();
  MCSR::default_instance_ = new MCSR();
  CA::default_instance_ = new CA();
  CSTBS::default_instance_->InitAsDefaultInstance();
  MCSR::default_instance_->InitAsDefaultInstance();
  CA::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_csrtbs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_csrtbs_2eproto {
  StaticDescriptorInitializer_csrtbs_2eproto() {
    protobuf_AddDesc_csrtbs_2eproto();
  }
} static_descriptor_initializer_csrtbs_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSTBS::kDeviceIDFieldNumber;
const int CSTBS::kOrgIDFieldNumber;
const int CSTBS::kCurveIDFieldNumber;
const int CSTBS::kHashIDFieldNumber;
const int CSTBS::kPubKLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSTBS::CSTBS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSV.CSTBS)
}

void CSTBS::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CSTBS::CSTBS(const CSTBS& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSV.CSTBS)
}

void CSTBS::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0;
  orgid_ = 0;
  curveid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubklen_ = 0;
}

CSTBS::~CSTBS() {
  // @@protoc_insertion_point(destructor:CSV.CSTBS)
  SharedDtor();
}

void CSTBS::SharedDtor() {
  curveid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CSTBS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSTBS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSTBS_descriptor_;
}

const CSTBS& CSTBS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csrtbs_2eproto();
  return *default_instance_;
}

CSTBS* CSTBS::default_instance_ = NULL;

CSTBS* CSTBS::New(::google::protobuf::Arena* arena) const {
  CSTBS* n = new CSTBS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSTBS::Clear() {
// @@protoc_insertion_point(message_clear_start:CSV.CSTBS)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CSTBS, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CSTBS*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(deviceid_, orgid_);
  curveid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubklen_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool CSTBS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSV.CSTBS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 deviceID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deviceid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_orgID;
        break;
      }

      // optional int32 orgID = 2;
      case 2: {
        if (tag == 16) {
         parse_orgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orgid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_curveID;
        break;
      }

      // optional string curveID = 3;
      case 3: {
        if (tag == 26) {
         parse_curveID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_curveid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->curveid().data(), this->curveid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CSV.CSTBS.curveID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hashID;
        break;
      }

      // optional string hashID = 4;
      case 4: {
        if (tag == 34) {
         parse_hashID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hashid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hashid().data(), this->hashid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CSV.CSTBS.hashID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pubKLen;
        break;
      }

      // optional int32 pubKLen = 5;
      case 5: {
        if (tag == 40) {
         parse_pubKLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pubklen_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSV.CSTBS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSV.CSTBS)
  return false;
#undef DO_
}

void CSTBS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSV.CSTBS)
  // optional int32 deviceID = 1;
  if (this->deviceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->deviceid(), output);
  }

  // optional int32 orgID = 2;
  if (this->orgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->orgid(), output);
  }

  // optional string curveID = 3;
  if (this->curveid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->curveid().data(), this->curveid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CSV.CSTBS.curveID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->curveid(), output);
  }

  // optional string hashID = 4;
  if (this->hashid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hashid().data(), this->hashid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CSV.CSTBS.hashID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hashid(), output);
  }

  // optional int32 pubKLen = 5;
  if (this->pubklen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pubklen(), output);
  }

  // @@protoc_insertion_point(serialize_end:CSV.CSTBS)
}

::google::protobuf::uint8* CSTBS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSV.CSTBS)
  // optional int32 deviceID = 1;
  if (this->deviceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->deviceid(), target);
  }

  // optional int32 orgID = 2;
  if (this->orgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->orgid(), target);
  }

  // optional string curveID = 3;
  if (this->curveid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->curveid().data(), this->curveid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CSV.CSTBS.curveID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->curveid(), target);
  }

  // optional string hashID = 4;
  if (this->hashid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hashid().data(), this->hashid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CSV.CSTBS.hashID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hashid(), target);
  }

  // optional int32 pubKLen = 5;
  if (this->pubklen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pubklen(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CSV.CSTBS)
  return target;
}

int CSTBS::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CSV.CSTBS)
  int total_size = 0;

  // optional int32 deviceID = 1;
  if (this->deviceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->deviceid());
  }

  // optional int32 orgID = 2;
  if (this->orgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->orgid());
  }

  // optional string curveID = 3;
  if (this->curveid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->curveid());
  }

  // optional string hashID = 4;
  if (this->hashid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hashid());
  }

  // optional int32 pubKLen = 5;
  if (this->pubklen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pubklen());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSTBS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSV.CSTBS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CSTBS* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSTBS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSV.CSTBS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSV.CSTBS)
    MergeFrom(*source);
  }
}

void CSTBS::MergeFrom(const CSTBS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSV.CSTBS)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.deviceid() != 0) {
    set_deviceid(from.deviceid());
  }
  if (from.orgid() != 0) {
    set_orgid(from.orgid());
  }
  if (from.curveid().size() > 0) {

    curveid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.curveid_);
  }
  if (from.hashid().size() > 0) {

    hashid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashid_);
  }
  if (from.pubklen() != 0) {
    set_pubklen(from.pubklen());
  }
}

void CSTBS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSV.CSTBS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTBS::CopyFrom(const CSTBS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSV.CSTBS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTBS::IsInitialized() const {

  return true;
}

void CSTBS::Swap(CSTBS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSTBS::InternalSwap(CSTBS* other) {
  std::swap(deviceid_, other->deviceid_);
  std::swap(orgid_, other->orgid_);
  curveid_.Swap(&other->curveid_);
  hashid_.Swap(&other->hashid_);
  std::swap(pubklen_, other->pubklen_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSTBS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSTBS_descriptor_;
  metadata.reflection = CSTBS_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSTBS

// optional int32 deviceID = 1;
void CSTBS::clear_deviceid() {
  deviceid_ = 0;
}
 ::google::protobuf::int32 CSTBS::deviceid() const {
  // @@protoc_insertion_point(field_get:CSV.CSTBS.deviceID)
  return deviceid_;
}
 void CSTBS::set_deviceid(::google::protobuf::int32 value) {
  
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:CSV.CSTBS.deviceID)
}

// optional int32 orgID = 2;
void CSTBS::clear_orgid() {
  orgid_ = 0;
}
 ::google::protobuf::int32 CSTBS::orgid() const {
  // @@protoc_insertion_point(field_get:CSV.CSTBS.orgID)
  return orgid_;
}
 void CSTBS::set_orgid(::google::protobuf::int32 value) {
  
  orgid_ = value;
  // @@protoc_insertion_point(field_set:CSV.CSTBS.orgID)
}

// optional string curveID = 3;
void CSTBS::clear_curveid() {
  curveid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CSTBS::curveid() const {
  // @@protoc_insertion_point(field_get:CSV.CSTBS.curveID)
  return curveid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSTBS::set_curveid(const ::std::string& value) {
  
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSV.CSTBS.curveID)
}
 void CSTBS::set_curveid(const char* value) {
  
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSV.CSTBS.curveID)
}
 void CSTBS::set_curveid(const char* value, size_t size) {
  
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSV.CSTBS.curveID)
}
 ::std::string* CSTBS::mutable_curveid() {
  
  // @@protoc_insertion_point(field_mutable:CSV.CSTBS.curveID)
  return curveid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CSTBS::release_curveid() {
  // @@protoc_insertion_point(field_release:CSV.CSTBS.curveID)
  
  return curveid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSTBS::set_allocated_curveid(::std::string* curveid) {
  if (curveid != NULL) {
    
  } else {
    
  }
  curveid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), curveid);
  // @@protoc_insertion_point(field_set_allocated:CSV.CSTBS.curveID)
}

// optional string hashID = 4;
void CSTBS::clear_hashid() {
  hashid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CSTBS::hashid() const {
  // @@protoc_insertion_point(field_get:CSV.CSTBS.hashID)
  return hashid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSTBS::set_hashid(const ::std::string& value) {
  
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSV.CSTBS.hashID)
}
 void CSTBS::set_hashid(const char* value) {
  
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSV.CSTBS.hashID)
}
 void CSTBS::set_hashid(const char* value, size_t size) {
  
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSV.CSTBS.hashID)
}
 ::std::string* CSTBS::mutable_hashid() {
  
  // @@protoc_insertion_point(field_mutable:CSV.CSTBS.hashID)
  return hashid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CSTBS::release_hashid() {
  // @@protoc_insertion_point(field_release:CSV.CSTBS.hashID)
  
  return hashid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CSTBS::set_allocated_hashid(::std::string* hashid) {
  if (hashid != NULL) {
    
  } else {
    
  }
  hashid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashid);
  // @@protoc_insertion_point(field_set_allocated:CSV.CSTBS.hashID)
}

// optional int32 pubKLen = 5;
void CSTBS::clear_pubklen() {
  pubklen_ = 0;
}
 ::google::protobuf::int32 CSTBS::pubklen() const {
  // @@protoc_insertion_point(field_get:CSV.CSTBS.pubKLen)
  return pubklen_;
}
 void CSTBS::set_pubklen(::google::protobuf::int32 value) {
  
  pubklen_ = value;
  // @@protoc_insertion_point(field_set:CSV.CSTBS.pubKLen)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MCSR::kDeviceIDFieldNumber;
const int MCSR::kOrgIDFieldNumber;
const int MCSR::kCurveIDFieldNumber;
const int MCSR::kHashIDFieldNumber;
const int MCSR::kPubKLenFieldNumber;
const int MCSR::kSigLFieldNumber;
const int MCSR::kSigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MCSR::MCSR()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSV.MCSR)
}

void MCSR::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MCSR::MCSR(const MCSR& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSV.MCSR)
}

void MCSR::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0;
  orgid_ = 0;
  curveid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubklen_ = 0;
  sigl_ = 0;
  sig_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MCSR::~MCSR() {
  // @@protoc_insertion_point(destructor:CSV.MCSR)
  SharedDtor();
}

void MCSR::SharedDtor() {
  curveid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sig_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MCSR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MCSR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MCSR_descriptor_;
}

const MCSR& MCSR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csrtbs_2eproto();
  return *default_instance_;
}

MCSR* MCSR::default_instance_ = NULL;

MCSR* MCSR::New(::google::protobuf::Arena* arena) const {
  MCSR* n = new MCSR;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MCSR::Clear() {
// @@protoc_insertion_point(message_clear_start:CSV.MCSR)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MCSR, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MCSR*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(deviceid_, orgid_);
  ZR_(pubklen_, sigl_);
  curveid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MCSR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSV.MCSR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 deviceID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deviceid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_orgID;
        break;
      }

      // optional int32 orgID = 2;
      case 2: {
        if (tag == 16) {
         parse_orgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orgid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_curveID;
        break;
      }

      // optional string curveID = 3;
      case 3: {
        if (tag == 26) {
         parse_curveID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_curveid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->curveid().data(), this->curveid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CSV.MCSR.curveID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hashID;
        break;
      }

      // optional string hashID = 4;
      case 4: {
        if (tag == 34) {
         parse_hashID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hashid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hashid().data(), this->hashid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CSV.MCSR.hashID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pubKLen;
        break;
      }

      // optional int32 pubKLen = 5;
      case 5: {
        if (tag == 40) {
         parse_pubKLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pubklen_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sigL;
        break;
      }

      // optional int32 sigL = 6;
      case 6: {
        if (tag == 48) {
         parse_sigL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sigl_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sig;
        break;
      }

      // optional bytes sig = 7;
      case 7: {
        if (tag == 58) {
         parse_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSV.MCSR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSV.MCSR)
  return false;
#undef DO_
}

void MCSR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSV.MCSR)
  // optional int32 deviceID = 1;
  if (this->deviceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->deviceid(), output);
  }

  // optional int32 orgID = 2;
  if (this->orgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->orgid(), output);
  }

  // optional string curveID = 3;
  if (this->curveid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->curveid().data(), this->curveid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CSV.MCSR.curveID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->curveid(), output);
  }

  // optional string hashID = 4;
  if (this->hashid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hashid().data(), this->hashid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CSV.MCSR.hashID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hashid(), output);
  }

  // optional int32 pubKLen = 5;
  if (this->pubklen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pubklen(), output);
  }

  // optional int32 sigL = 6;
  if (this->sigl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sigl(), output);
  }

  // optional bytes sig = 7;
  if (this->sig().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->sig(), output);
  }

  // @@protoc_insertion_point(serialize_end:CSV.MCSR)
}

::google::protobuf::uint8* MCSR::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSV.MCSR)
  // optional int32 deviceID = 1;
  if (this->deviceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->deviceid(), target);
  }

  // optional int32 orgID = 2;
  if (this->orgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->orgid(), target);
  }

  // optional string curveID = 3;
  if (this->curveid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->curveid().data(), this->curveid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CSV.MCSR.curveID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->curveid(), target);
  }

  // optional string hashID = 4;
  if (this->hashid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hashid().data(), this->hashid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CSV.MCSR.hashID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hashid(), target);
  }

  // optional int32 pubKLen = 5;
  if (this->pubklen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pubklen(), target);
  }

  // optional int32 sigL = 6;
  if (this->sigl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sigl(), target);
  }

  // optional bytes sig = 7;
  if (this->sig().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->sig(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CSV.MCSR)
  return target;
}

int MCSR::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CSV.MCSR)
  int total_size = 0;

  // optional int32 deviceID = 1;
  if (this->deviceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->deviceid());
  }

  // optional int32 orgID = 2;
  if (this->orgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->orgid());
  }

  // optional string curveID = 3;
  if (this->curveid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->curveid());
  }

  // optional string hashID = 4;
  if (this->hashid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hashid());
  }

  // optional int32 pubKLen = 5;
  if (this->pubklen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pubklen());
  }

  // optional int32 sigL = 6;
  if (this->sigl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sigl());
  }

  // optional bytes sig = 7;
  if (this->sig().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sig());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MCSR::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSV.MCSR)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MCSR* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MCSR>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSV.MCSR)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSV.MCSR)
    MergeFrom(*source);
  }
}

void MCSR::MergeFrom(const MCSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSV.MCSR)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.deviceid() != 0) {
    set_deviceid(from.deviceid());
  }
  if (from.orgid() != 0) {
    set_orgid(from.orgid());
  }
  if (from.curveid().size() > 0) {

    curveid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.curveid_);
  }
  if (from.hashid().size() > 0) {

    hashid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashid_);
  }
  if (from.pubklen() != 0) {
    set_pubklen(from.pubklen());
  }
  if (from.sigl() != 0) {
    set_sigl(from.sigl());
  }
  if (from.sig().size() > 0) {

    sig_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sig_);
  }
}

void MCSR::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSV.MCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MCSR::CopyFrom(const MCSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSV.MCSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MCSR::IsInitialized() const {

  return true;
}

void MCSR::Swap(MCSR* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MCSR::InternalSwap(MCSR* other) {
  std::swap(deviceid_, other->deviceid_);
  std::swap(orgid_, other->orgid_);
  curveid_.Swap(&other->curveid_);
  hashid_.Swap(&other->hashid_);
  std::swap(pubklen_, other->pubklen_);
  std::swap(sigl_, other->sigl_);
  sig_.Swap(&other->sig_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MCSR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MCSR_descriptor_;
  metadata.reflection = MCSR_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MCSR

// optional int32 deviceID = 1;
void MCSR::clear_deviceid() {
  deviceid_ = 0;
}
 ::google::protobuf::int32 MCSR::deviceid() const {
  // @@protoc_insertion_point(field_get:CSV.MCSR.deviceID)
  return deviceid_;
}
 void MCSR::set_deviceid(::google::protobuf::int32 value) {
  
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:CSV.MCSR.deviceID)
}

// optional int32 orgID = 2;
void MCSR::clear_orgid() {
  orgid_ = 0;
}
 ::google::protobuf::int32 MCSR::orgid() const {
  // @@protoc_insertion_point(field_get:CSV.MCSR.orgID)
  return orgid_;
}
 void MCSR::set_orgid(::google::protobuf::int32 value) {
  
  orgid_ = value;
  // @@protoc_insertion_point(field_set:CSV.MCSR.orgID)
}

// optional string curveID = 3;
void MCSR::clear_curveid() {
  curveid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MCSR::curveid() const {
  // @@protoc_insertion_point(field_get:CSV.MCSR.curveID)
  return curveid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MCSR::set_curveid(const ::std::string& value) {
  
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSV.MCSR.curveID)
}
 void MCSR::set_curveid(const char* value) {
  
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSV.MCSR.curveID)
}
 void MCSR::set_curveid(const char* value, size_t size) {
  
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSV.MCSR.curveID)
}
 ::std::string* MCSR::mutable_curveid() {
  
  // @@protoc_insertion_point(field_mutable:CSV.MCSR.curveID)
  return curveid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MCSR::release_curveid() {
  // @@protoc_insertion_point(field_release:CSV.MCSR.curveID)
  
  return curveid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MCSR::set_allocated_curveid(::std::string* curveid) {
  if (curveid != NULL) {
    
  } else {
    
  }
  curveid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), curveid);
  // @@protoc_insertion_point(field_set_allocated:CSV.MCSR.curveID)
}

// optional string hashID = 4;
void MCSR::clear_hashid() {
  hashid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MCSR::hashid() const {
  // @@protoc_insertion_point(field_get:CSV.MCSR.hashID)
  return hashid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MCSR::set_hashid(const ::std::string& value) {
  
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSV.MCSR.hashID)
}
 void MCSR::set_hashid(const char* value) {
  
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSV.MCSR.hashID)
}
 void MCSR::set_hashid(const char* value, size_t size) {
  
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSV.MCSR.hashID)
}
 ::std::string* MCSR::mutable_hashid() {
  
  // @@protoc_insertion_point(field_mutable:CSV.MCSR.hashID)
  return hashid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MCSR::release_hashid() {
  // @@protoc_insertion_point(field_release:CSV.MCSR.hashID)
  
  return hashid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MCSR::set_allocated_hashid(::std::string* hashid) {
  if (hashid != NULL) {
    
  } else {
    
  }
  hashid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashid);
  // @@protoc_insertion_point(field_set_allocated:CSV.MCSR.hashID)
}

// optional int32 pubKLen = 5;
void MCSR::clear_pubklen() {
  pubklen_ = 0;
}
 ::google::protobuf::int32 MCSR::pubklen() const {
  // @@protoc_insertion_point(field_get:CSV.MCSR.pubKLen)
  return pubklen_;
}
 void MCSR::set_pubklen(::google::protobuf::int32 value) {
  
  pubklen_ = value;
  // @@protoc_insertion_point(field_set:CSV.MCSR.pubKLen)
}

// optional int32 sigL = 6;
void MCSR::clear_sigl() {
  sigl_ = 0;
}
 ::google::protobuf::int32 MCSR::sigl() const {
  // @@protoc_insertion_point(field_get:CSV.MCSR.sigL)
  return sigl_;
}
 void MCSR::set_sigl(::google::protobuf::int32 value) {
  
  sigl_ = value;
  // @@protoc_insertion_point(field_set:CSV.MCSR.sigL)
}

// optional bytes sig = 7;
void MCSR::clear_sig() {
  sig_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MCSR::sig() const {
  // @@protoc_insertion_point(field_get:CSV.MCSR.sig)
  return sig_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MCSR::set_sig(const ::std::string& value) {
  
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSV.MCSR.sig)
}
 void MCSR::set_sig(const char* value) {
  
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSV.MCSR.sig)
}
 void MCSR::set_sig(const void* value, size_t size) {
  
  sig_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSV.MCSR.sig)
}
 ::std::string* MCSR::mutable_sig() {
  
  // @@protoc_insertion_point(field_mutable:CSV.MCSR.sig)
  return sig_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MCSR::release_sig() {
  // @@protoc_insertion_point(field_release:CSV.MCSR.sig)
  
  return sig_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MCSR::set_allocated_sig(::std::string* sig) {
  if (sig != NULL) {
    
  } else {
    
  }
  sig_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sig);
  // @@protoc_insertion_point(field_set_allocated:CSV.MCSR.sig)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CA::kDeviceIDFieldNumber;
const int CA::kOrgIDFieldNumber;
const int CA::kCurveIDFieldNumber;
const int CA::kHashIDFieldNumber;
const int CA::kPubKLenFieldNumber;
const int CA::kCertSNOFieldNumber;
const int CA::kCaIDFieldNumber;
const int CA::kValidFFieldNumber;
const int CA::kValidForFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CA::CA()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSV.CA)
}

void CA::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CA::CA(const CA& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSV.CA)
}

void CA::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deviceid_ = 0;
  orgid_ = 0;
  curveid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubklen_ = 0;
  certsno_ = 0;
  caid_ = 0;
  validf_ = 0;
  validfor_ = 0;
}

CA::~CA() {
  // @@protoc_insertion_point(destructor:CSV.CA)
  SharedDtor();
}

void CA::SharedDtor() {
  curveid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CA_descriptor_;
}

const CA& CA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_csrtbs_2eproto();
  return *default_instance_;
}

CA* CA::default_instance_ = NULL;

CA* CA::New(::google::protobuf::Arena* arena) const {
  CA* n = new CA;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CA::Clear() {
// @@protoc_insertion_point(message_clear_start:CSV.CA)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CA, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CA*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(deviceid_, orgid_);
  ZR_(pubklen_, validf_);
  curveid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  validfor_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool CA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSV.CA)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 deviceID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deviceid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_orgID;
        break;
      }

      // optional int32 orgID = 2;
      case 2: {
        if (tag == 16) {
         parse_orgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orgid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_curveID;
        break;
      }

      // optional string curveID = 3;
      case 3: {
        if (tag == 26) {
         parse_curveID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_curveid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->curveid().data(), this->curveid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CSV.CA.curveID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_hashID;
        break;
      }

      // optional string hashID = 4;
      case 4: {
        if (tag == 34) {
         parse_hashID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hashid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hashid().data(), this->hashid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "CSV.CA.hashID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pubKLen;
        break;
      }

      // optional int32 pubKLen = 5;
      case 5: {
        if (tag == 40) {
         parse_pubKLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pubklen_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_certSNO;
        break;
      }

      // optional int32 certSNO = 6;
      case 6: {
        if (tag == 48) {
         parse_certSNO:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &certsno_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_caID;
        break;
      }

      // optional int32 caID = 7;
      case 7: {
        if (tag == 56) {
         parse_caID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &caid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_validF;
        break;
      }

      // optional int32 validF = 8;
      case 8: {
        if (tag == 64) {
         parse_validF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validf_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_validFor;
        break;
      }

      // optional int32 validFor = 9;
      case 9: {
        if (tag == 72) {
         parse_validFor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validfor_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSV.CA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSV.CA)
  return false;
#undef DO_
}

void CA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSV.CA)
  // optional int32 deviceID = 1;
  if (this->deviceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->deviceid(), output);
  }

  // optional int32 orgID = 2;
  if (this->orgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->orgid(), output);
  }

  // optional string curveID = 3;
  if (this->curveid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->curveid().data(), this->curveid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CSV.CA.curveID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->curveid(), output);
  }

  // optional string hashID = 4;
  if (this->hashid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hashid().data(), this->hashid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CSV.CA.hashID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hashid(), output);
  }

  // optional int32 pubKLen = 5;
  if (this->pubklen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pubklen(), output);
  }

  // optional int32 certSNO = 6;
  if (this->certsno() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->certsno(), output);
  }

  // optional int32 caID = 7;
  if (this->caid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->caid(), output);
  }

  // optional int32 validF = 8;
  if (this->validf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->validf(), output);
  }

  // optional int32 validFor = 9;
  if (this->validfor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->validfor(), output);
  }

  // @@protoc_insertion_point(serialize_end:CSV.CA)
}

::google::protobuf::uint8* CA::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSV.CA)
  // optional int32 deviceID = 1;
  if (this->deviceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->deviceid(), target);
  }

  // optional int32 orgID = 2;
  if (this->orgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->orgid(), target);
  }

  // optional string curveID = 3;
  if (this->curveid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->curveid().data(), this->curveid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CSV.CA.curveID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->curveid(), target);
  }

  // optional string hashID = 4;
  if (this->hashid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hashid().data(), this->hashid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "CSV.CA.hashID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hashid(), target);
  }

  // optional int32 pubKLen = 5;
  if (this->pubklen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pubklen(), target);
  }

  // optional int32 certSNO = 6;
  if (this->certsno() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->certsno(), target);
  }

  // optional int32 caID = 7;
  if (this->caid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->caid(), target);
  }

  // optional int32 validF = 8;
  if (this->validf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->validf(), target);
  }

  // optional int32 validFor = 9;
  if (this->validfor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->validfor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CSV.CA)
  return target;
}

int CA::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CSV.CA)
  int total_size = 0;

  // optional int32 deviceID = 1;
  if (this->deviceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->deviceid());
  }

  // optional int32 orgID = 2;
  if (this->orgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->orgid());
  }

  // optional string curveID = 3;
  if (this->curveid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->curveid());
  }

  // optional string hashID = 4;
  if (this->hashid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hashid());
  }

  // optional int32 pubKLen = 5;
  if (this->pubklen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pubklen());
  }

  // optional int32 certSNO = 6;
  if (this->certsno() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->certsno());
  }

  // optional int32 caID = 7;
  if (this->caid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->caid());
  }

  // optional int32 validF = 8;
  if (this->validf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->validf());
  }

  // optional int32 validFor = 9;
  if (this->validfor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->validfor());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CA::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSV.CA)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CA* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CA>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSV.CA)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSV.CA)
    MergeFrom(*source);
  }
}

void CA::MergeFrom(const CA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSV.CA)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.deviceid() != 0) {
    set_deviceid(from.deviceid());
  }
  if (from.orgid() != 0) {
    set_orgid(from.orgid());
  }
  if (from.curveid().size() > 0) {

    curveid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.curveid_);
  }
  if (from.hashid().size() > 0) {

    hashid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashid_);
  }
  if (from.pubklen() != 0) {
    set_pubklen(from.pubklen());
  }
  if (from.certsno() != 0) {
    set_certsno(from.certsno());
  }
  if (from.caid() != 0) {
    set_caid(from.caid());
  }
  if (from.validf() != 0) {
    set_validf(from.validf());
  }
  if (from.validfor() != 0) {
    set_validfor(from.validfor());
  }
}

void CA::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSV.CA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CA::CopyFrom(const CA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSV.CA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CA::IsInitialized() const {

  return true;
}

void CA::Swap(CA* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CA::InternalSwap(CA* other) {
  std::swap(deviceid_, other->deviceid_);
  std::swap(orgid_, other->orgid_);
  curveid_.Swap(&other->curveid_);
  hashid_.Swap(&other->hashid_);
  std::swap(pubklen_, other->pubklen_);
  std::swap(certsno_, other->certsno_);
  std::swap(caid_, other->caid_);
  std::swap(validf_, other->validf_);
  std::swap(validfor_, other->validfor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CA_descriptor_;
  metadata.reflection = CA_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CA

// optional int32 deviceID = 1;
void CA::clear_deviceid() {
  deviceid_ = 0;
}
 ::google::protobuf::int32 CA::deviceid() const {
  // @@protoc_insertion_point(field_get:CSV.CA.deviceID)
  return deviceid_;
}
 void CA::set_deviceid(::google::protobuf::int32 value) {
  
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:CSV.CA.deviceID)
}

// optional int32 orgID = 2;
void CA::clear_orgid() {
  orgid_ = 0;
}
 ::google::protobuf::int32 CA::orgid() const {
  // @@protoc_insertion_point(field_get:CSV.CA.orgID)
  return orgid_;
}
 void CA::set_orgid(::google::protobuf::int32 value) {
  
  orgid_ = value;
  // @@protoc_insertion_point(field_set:CSV.CA.orgID)
}

// optional string curveID = 3;
void CA::clear_curveid() {
  curveid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CA::curveid() const {
  // @@protoc_insertion_point(field_get:CSV.CA.curveID)
  return curveid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CA::set_curveid(const ::std::string& value) {
  
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSV.CA.curveID)
}
 void CA::set_curveid(const char* value) {
  
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSV.CA.curveID)
}
 void CA::set_curveid(const char* value, size_t size) {
  
  curveid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSV.CA.curveID)
}
 ::std::string* CA::mutable_curveid() {
  
  // @@protoc_insertion_point(field_mutable:CSV.CA.curveID)
  return curveid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CA::release_curveid() {
  // @@protoc_insertion_point(field_release:CSV.CA.curveID)
  
  return curveid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CA::set_allocated_curveid(::std::string* curveid) {
  if (curveid != NULL) {
    
  } else {
    
  }
  curveid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), curveid);
  // @@protoc_insertion_point(field_set_allocated:CSV.CA.curveID)
}

// optional string hashID = 4;
void CA::clear_hashid() {
  hashid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CA::hashid() const {
  // @@protoc_insertion_point(field_get:CSV.CA.hashID)
  return hashid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CA::set_hashid(const ::std::string& value) {
  
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CSV.CA.hashID)
}
 void CA::set_hashid(const char* value) {
  
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CSV.CA.hashID)
}
 void CA::set_hashid(const char* value, size_t size) {
  
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CSV.CA.hashID)
}
 ::std::string* CA::mutable_hashid() {
  
  // @@protoc_insertion_point(field_mutable:CSV.CA.hashID)
  return hashid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CA::release_hashid() {
  // @@protoc_insertion_point(field_release:CSV.CA.hashID)
  
  return hashid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CA::set_allocated_hashid(::std::string* hashid) {
  if (hashid != NULL) {
    
  } else {
    
  }
  hashid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashid);
  // @@protoc_insertion_point(field_set_allocated:CSV.CA.hashID)
}

// optional int32 pubKLen = 5;
void CA::clear_pubklen() {
  pubklen_ = 0;
}
 ::google::protobuf::int32 CA::pubklen() const {
  // @@protoc_insertion_point(field_get:CSV.CA.pubKLen)
  return pubklen_;
}
 void CA::set_pubklen(::google::protobuf::int32 value) {
  
  pubklen_ = value;
  // @@protoc_insertion_point(field_set:CSV.CA.pubKLen)
}

// optional int32 certSNO = 6;
void CA::clear_certsno() {
  certsno_ = 0;
}
 ::google::protobuf::int32 CA::certsno() const {
  // @@protoc_insertion_point(field_get:CSV.CA.certSNO)
  return certsno_;
}
 void CA::set_certsno(::google::protobuf::int32 value) {
  
  certsno_ = value;
  // @@protoc_insertion_point(field_set:CSV.CA.certSNO)
}

// optional int32 caID = 7;
void CA::clear_caid() {
  caid_ = 0;
}
 ::google::protobuf::int32 CA::caid() const {
  // @@protoc_insertion_point(field_get:CSV.CA.caID)
  return caid_;
}
 void CA::set_caid(::google::protobuf::int32 value) {
  
  caid_ = value;
  // @@protoc_insertion_point(field_set:CSV.CA.caID)
}

// optional int32 validF = 8;
void CA::clear_validf() {
  validf_ = 0;
}
 ::google::protobuf::int32 CA::validf() const {
  // @@protoc_insertion_point(field_get:CSV.CA.validF)
  return validf_;
}
 void CA::set_validf(::google::protobuf::int32 value) {
  
  validf_ = value;
  // @@protoc_insertion_point(field_set:CSV.CA.validF)
}

// optional int32 validFor = 9;
void CA::clear_validfor() {
  validfor_ = 0;
}
 ::google::protobuf::int32 CA::validfor() const {
  // @@protoc_insertion_point(field_get:CSV.CA.validFor)
  return validfor_;
}
 void CA::set_validfor(::google::protobuf::int32 value) {
  
  validfor_ = value;
  // @@protoc_insertion_point(field_set:CSV.CA.validFor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace CSV

// @@protoc_insertion_point(global_scope)
